@model ProductionPlanningDashboard.Models.ViewModels.DataEntryViewModel
@{
    ViewData["Title"] = $"Data Entry - {Model.DepartmentName}";
}

<div class="container-fluid">
    <!-- Header with Department Info -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="h3 mb-1 text-gray-800">
                        <i class="bi bi-pencil-square me-2"></i>Production Data Entry
                    </h1>
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb mb-0">
                            <li class="breadcrumb-item"><a asp-controller="Dashboard" asp-action="Index">Dashboard</a></li>
                            <li class="breadcrumb-item active">@Model.DepartmentName Department</li>
                        </ol>
                    </nav>
                </div>
                <div class="btn-group" role="group">
                    <a asp-controller="Dashboard" asp-action="Index" class="btn btn-outline-secondary">
                        <i class="bi bi-arrow-left me-1"></i>Back to Dashboard
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Step 1: Department & Date Selection -->
    <div class="card shadow-sm mb-4">
        <div class="card-header bg-primary text-white">
            <h5 class="card-title mb-0">
                <span class="badge bg-light text-primary me-2">1</span>
                Department & Date Selection
            </h5>
        </div>
        <div class="card-body">
            <div class="row g-3 align-items-end">
                <!-- Department Switcher -->
                <div class="col-md-3">
                    <label class="form-label fw-bold">Department</label>
                    <select id="departmentSelect" class="form-select form-select-lg" onchange="switchDepartment()">
                        @foreach (var dept in Model.Departments)
                        {
                            <option value="@dept.Id" selected="@(Model.SelectedDepartmentId == dept.Id)">@dept.Name</option>
                        }
                    </select>
                </div>

                <!-- Date Picker with Week/Month Display -->
                <div class="col-md-4">
                    <label class="form-label fw-bold">Production Date</label>
                    <div class="input-group">
                        <input type="date" id="productionDate" class="form-control form-control-lg"
                               value="@Model.SelectedDate.ToString("yyyy-MM-dd")" onchange="updateDateInfo()">
                        <button class="btn btn-outline-secondary" type="button" onclick="setToday()">
                            <i class="bi bi-calendar-today"></i> Today
                        </button>
                    </div>
                </div>

                <!-- Week/Month Info with Edit -->
                <div class="col-md-3">
                    <label class="form-label fw-bold">Week & Month</label>
                    <div class="d-flex gap-2">
                        <div class="input-group">
                            <span class="input-group-text">W</span>
                            <input type="number" id="weekNumber" class="form-control" min="1" max="53"
                                   value="@Model.WeekNumber" onchange="updateFromWeek()">
                        </div>
                        <div class="input-group">
                            <span class="input-group-text">M</span>
                            <input type="number" id="monthNumber" class="form-control" min="1" max="12"
                                   value="@Model.MonthNumber" onchange="updateFromMonth()">
                        </div>
                    </div>
                    <small class="text-muted">Year: <span id="yearDisplay">@Model.Year</span></small>
                </div>

                <!-- Period Type -->
                <div class="col-md-2">
                    <label class="form-label fw-bold">Period</label>
                    <select id="periodType" class="form-select form-select-lg" onchange="loadDataForDate()">
                        <option value="Weekly" selected="@(Model.PeriodType == "Weekly")">Weekly</option>
                        <option value="Monthly" selected="@(Model.PeriodType == "Monthly")">Monthly</option>
                    </select>
                </div>
            </div>

            <!-- Date Info Display -->
            <div class="mt-3 p-3 bg-light rounded">
                <div class="row text-center">
                    <div class="col-md-4">
                        <strong class="text-primary">Selected Date:</strong><br>
                        <span id="displayDate" class="fs-5">@Model.SelectedDate.ToString("MMM dd, yyyy")</span>
                    </div>
                    <div class="col-md-4">
                        <strong class="text-success">Week Number:</strong><br>
                        <span id="displayWeek" class="fs-5">Week @Model.WeekNumber</span>
                    </div>
                    <div class="col-md-4">
                        <strong class="text-warning">Month:</strong><br>
                        <span id="displayMonth" class="fs-5">@Model.SelectedDate.ToString("MMMM")</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Step 2: Production Data Entry -->
    <div class="card shadow">
        <div class="card-header bg-success text-white">
            <div class="d-flex justify-content-between align-items-center">
                <h5 class="card-title mb-0">
                    <span class="badge bg-light text-success me-2">2</span>
                    Production Data - @Model.DepartmentName Department
                </h5>
                <div class="btn-group" role="group">
                    <button type="button" class="btn btn-light btn-sm" onclick="addNewRow()">
                        <i class="bi bi-plus-circle me-1"></i>Add Row
                    </button>
                    <button type="button" class="btn btn-warning btn-sm" onclick="clearAllRows()">
                        <i class="bi bi-trash me-1"></i>Clear All
                    </button>
                </div>
            </div>
        </div>
        <div class="card-body">
            <!-- Instructions -->
            <div class="alert alert-info mb-4">
                <i class="bi bi-info-circle me-2"></i>
                <strong>Instructions:</strong> Enter planned and actual quantities for each company and production line.
                Use the <strong>Add Row</strong> button to add more entries. Click <strong>Save All</strong> when finished.
            </div>

            <!-- Data Entry Table -->
            <div class="table-responsive">
                <table class="table table-hover" id="dataEntryTable">
                    <thead class="table-dark">
                        <tr>
                            <th width="200px">Company</th>
                            <th width="200px">Production Line</th>
                            <th width="150px">Planned Qty</th>
                            <th width="150px">Actual Qty</th>
                            <th width="120px">Difference</th>
                            <th width="100px">Performance</th>
                            <th width="80px">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="dataEntryTableBody">
                        <!-- Rows will be populated by JavaScript -->
                    </tbody>
                </table>
            </div>

            <!-- Summary Row -->
            <div class="row mt-4 p-3 bg-light rounded">
                <div class="col-md-12">
                    <div class="row text-center">
                        <div class="col-md-3">
                            <strong class="text-primary">Total Planned:</strong><br>
                            <span id="totalPlanned" class="fs-4 text-primary">0</span>
                        </div>
                        <div class="col-md-3">
                            <strong class="text-success">Total Actual:</strong><br>
                            <span id="totalActual" class="fs-4 text-success">0</span>
                        </div>
                        <div class="col-md-3">
                            <strong class="text-warning">Total Difference:</strong><br>
                            <span id="totalDifference" class="fs-4">0</span>
                        </div>
                        <div class="col-md-3">
                            <strong class="text-info">Overall Performance:</strong><br>
                            <span id="overallPerformance" class="fs-4">0%</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Action Buttons -->
            <div class="mt-4 text-center">
                <button type="button" class="btn btn-success btn-lg me-3" onclick="saveAllData()">
                    <i class="bi bi-floppy me-2"></i>Save All Changes
                </button>
                <button type="button" class="btn btn-outline-secondary btn-lg" onclick="cancelChanges()">
                    <i class="bi bi-x-circle me-2"></i>Cancel Changes
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Global variables
        let rowCounter = 0;
        let companies = @Html.Raw(Json.Serialize(Model.Companies));
        let lines = @Html.Raw(Json.Serialize(Model.Lines));
        let dataRows = @Html.Raw(Json.Serialize(Model.DataRows));
        let currentDepartmentId = @Model.SelectedDepartmentId;

        // Initialize page
        $(document).ready(function() {
            updateDateInfo();
            loadExistingData();
            updateTotals();
        });

        // Date and Week/Month Functions
        function updateDateInfo() {
            const dateInput = document.getElementById('productionDate');
            const selectedDate = new Date(dateInput.value);

            if (!isNaN(selectedDate)) {
                // Update week number
                const weekNumber = getWeekNumber(selectedDate);
                document.getElementById('weekNumber').value = weekNumber;
                document.getElementById('monthNumber').value = selectedDate.getMonth() + 1;
                document.getElementById('yearDisplay').textContent = selectedDate.getFullYear();

                // Update display
                document.getElementById('displayDate').textContent = selectedDate.toLocaleDateString('en-US', {
                    year: 'numeric', month: 'short', day: 'numeric'
                });
                document.getElementById('displayWeek').textContent = `Week ${weekNumber}`;
                document.getElementById('displayMonth').textContent = selectedDate.toLocaleDateString('en-US', { month: 'long' });

                // Load data for new date
                loadDataForDate();
            }
        }

        function getWeekNumber(date) {
            const firstDayOfYear = new Date(date.getFullYear(), 0, 1);
            const pastDaysOfYear = (date - firstDayOfYear) / 86400000;
            return Math.ceil((pastDaysOfYear + firstDayOfYear.getDay() + 1) / 7);
        }

        function updateFromWeek() {
            const weekNumber = parseInt(document.getElementById('weekNumber').value);
            const year = parseInt(document.getElementById('yearDisplay').textContent);

            if (weekNumber >= 1 && weekNumber <= 53) {
                const date = getDateFromWeek(year, weekNumber);
                document.getElementById('productionDate').value = date.toISOString().split('T')[0];
                updateDateInfo();
            }
        }

        function updateFromMonth() {
            const monthNumber = parseInt(document.getElementById('monthNumber').value);
            const year = parseInt(document.getElementById('yearDisplay').textContent);

            if (monthNumber >= 1 && monthNumber <= 12) {
                const date = new Date(year, monthNumber - 1, 1);
                document.getElementById('productionDate').value = date.toISOString().split('T')[0];
                updateDateInfo();
            }
        }

        function getDateFromWeek(year, week) {
            const firstDayOfYear = new Date(year, 0, 1);
            const days = (week - 1) * 7;
            return new Date(firstDayOfYear.getTime() + days * 24 * 60 * 60 * 1000);
        }

        function setToday() {
            const today = new Date();
            document.getElementById('productionDate').value = today.toISOString().split('T')[0];
            updateDateInfo();
        }

        // Department and Data Loading
        function switchDepartment() {
            const departmentId = document.getElementById('departmentSelect').value;
            const date = document.getElementById('productionDate').value;
            const periodType = document.getElementById('periodType').value;

            window.location.href = `/DataEntry/Index?departmentId=${departmentId}&date=${date}&periodType=${periodType}`;
        }

        function loadDataForDate() {
            const departmentId = document.getElementById('departmentSelect').value;
            const date = document.getElementById('productionDate').value;
            const periodType = document.getElementById('periodType').value;

            if (departmentId && date) {
                fetch(`/DataEntry/GetDataForDate?departmentId=${departmentId}&date=${date}&periodType=${periodType}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            dataRows = data.data;
                            loadExistingData();
                        }
                    })
                    .catch(error => {
                        console.error('Error loading data:', error);
                        showToast('Error loading data for selected date', 'danger');
                    });
            }
        }

        // Row Management
        function loadExistingData() {
            const tbody = document.getElementById('dataEntryTableBody');
            tbody.innerHTML = '';

            if (dataRows && dataRows.length > 0) {
                dataRows.forEach(row => {
                    createDataEntryRow(row);
                });
            } else {
                // Create empty rows for each company
                companies.forEach(company => {
                    createDataEntryRow({
                        id: 0,
                        companyId: company.id,
                        companyName: company.name,
                        lineId: null,
                        plannedQuantity: 0,
                        actualQuantity: 0,
                        isNew: true
                    });
                });
            }

            updateTotals();
        }

        function createDataEntryRow(data = null) {
            const tbody = document.getElementById('dataEntryTableBody');
            const row = document.createElement('tr');
            const rowId = data?.id || `new_${++rowCounter}`;

            row.id = `row_${rowId}`;
            row.innerHTML = `
                <td>
                    <select class="form-select" data-field="companyId" onchange="calculateRowValues(this)">
                        <option value="">Select Company</option>
                        ${companies.map(c => `<option value="${c.id}" ${data?.companyId == c.id ? 'selected' : ''}>${c.name}</option>`).join('')}
                    </select>
                </td>
                <td>
                    <select class="form-select" data-field="lineId" onchange="calculateRowValues(this)">
                        <option value="">Select Line</option>
                        ${lines.map(l => `<option value="${l.id}" ${data?.lineId == l.id ? 'selected' : ''}>${l.name}</option>`).join('')}
                    </select>
                </td>
                <td>
                    <input type="number" class="form-control text-end" data-field="plannedQuantity"
                           step="0.01" min="0" value="${data?.plannedQuantity || 0}"
                           onchange="calculateRowValues(this)" placeholder="0.00">
                </td>
                <td>
                    <input type="number" class="form-control text-end" data-field="actualQuantity"
                           step="0.01" min="0" value="${data?.actualQuantity || 0}"
                           onchange="calculateRowValues(this)" placeholder="0.00">
                </td>
                <td>
                    <span class="badge difference-badge fs-6">0.00</span>
                </td>
                <td>
                    <span class="badge performance-badge fs-6">0%</span>
                </td>
                <td>
                    <button type="button" class="btn btn-sm btn-outline-danger" onclick="deleteRow('${rowId}')">
                        <i class="bi bi-trash"></i>
                    </button>
                </td>
            `;

            // Store row data
            row.dataset.rowData = JSON.stringify({
                id: data?.id || 0,
                isNew: data?.isNew !== false,
                isDeleted: false
            });

            tbody.appendChild(row);
            calculateRowValues(row.querySelector('input[data-field="plannedQuantity"]'));

            return row;
        }

        function addNewRow() {
            createDataEntryRow({
                id: 0,
                companyId: '',
                lineId: '',
                plannedQuantity: 0,
                actualQuantity: 0,
                isNew: true
            });
            updateTotals();
        }

        function deleteRow(rowId) {
            if (confirm('Are you sure you want to delete this entry?')) {
                const row = document.getElementById(`row_${rowId}`);
                const rowData = JSON.parse(row.dataset.rowData);

                if (rowData.id > 0) {
                    // Mark for deletion
                    rowData.isDeleted = true;
                    row.dataset.rowData = JSON.stringify(rowData);
                    row.style.display = 'none';
                } else {
                    // Remove new row completely
                    row.remove();
                }

                updateTotals();
                showToast('Row marked for deletion', 'warning');
            }
        }

        function clearAllRows() {
            if (confirm('Are you sure you want to clear all data? This action cannot be undone.')) {
                document.getElementById('dataEntryTableBody').innerHTML = '';
                addNewRow(); // Add one empty row
                updateTotals();
                showToast('All rows cleared', 'info');
            }
        }

        // Calculations
        function calculateRowValues(element) {
            const row = element.closest('tr');
            const plannedInput = row.querySelector('input[data-field="plannedQuantity"]');
            const actualInput = row.querySelector('input[data-field="actualQuantity"]');

            const planned = parseFloat(plannedInput.value) || 0;
            const actual = parseFloat(actualInput.value) || 0;
            const difference = actual - planned;
            const performance = planned > 0 ? (actual / planned * 100) : 0;

            // Update difference badge
            const diffBadge = row.querySelector('.difference-badge');
            diffBadge.textContent = difference.toFixed(2);
            diffBadge.className = `badge difference-badge fs-6 ${difference >= 0 ? 'bg-success' : 'bg-danger'}`;

            // Update performance badge
            const perfBadge = row.querySelector('.performance-badge');
            perfBadge.textContent = performance.toFixed(1) + '%';
            perfBadge.className = `badge performance-badge fs-6 ${
                performance >= 100 ? 'bg-success' :
                performance >= 80 ? 'bg-warning' : 'bg-danger'
            }`;

            updateTotals();
        }

        function updateTotals() {
            let totalPlanned = 0;
            let totalActual = 0;

            const rows = document.querySelectorAll('#dataEntryTableBody tr:not([style*="display: none"])');

            rows.forEach(row => {
                const planned = parseFloat(row.querySelector('input[data-field="plannedQuantity"]').value) || 0;
                const actual = parseFloat(row.querySelector('input[data-field="actualQuantity"]').value) || 0;

                totalPlanned += planned;
                totalActual += actual;
            });

            const totalDifference = totalActual - totalPlanned;
            const overallPerformance = totalPlanned > 0 ? (totalActual / totalPlanned * 100) : 0;

            // Update summary
            document.getElementById('totalPlanned').textContent = totalPlanned.toFixed(2);
            document.getElementById('totalActual').textContent = totalActual.toFixed(2);

            const diffElement = document.getElementById('totalDifference');
            diffElement.textContent = totalDifference.toFixed(2);
            diffElement.className = `fs-4 ${totalDifference >= 0 ? 'text-success' : 'text-danger'}`;

            const perfElement = document.getElementById('overallPerformance');
            perfElement.textContent = overallPerformance.toFixed(1) + '%';
            perfElement.className = `fs-4 ${
                overallPerformance >= 100 ? 'text-success' :
                overallPerformance >= 80 ? 'text-warning' : 'text-danger'
            }`;
        }

        // Save Data
        function saveAllData() {
            const rows = document.querySelectorAll('#dataEntryTableBody tr');
            const dataToSave = [];

            rows.forEach(row => {
                const rowData = JSON.parse(row.dataset.rowData);
                const companyId = row.querySelector('select[data-field="companyId"]').value;
                const lineId = row.querySelector('select[data-field="lineId"]').value;
                const planned = parseFloat(row.querySelector('input[data-field="plannedQuantity"]').value) || 0;
                const actual = parseFloat(row.querySelector('input[data-field="actualQuantity"]').value) || 0;

                if (companyId && (planned > 0 || actual > 0 || rowData.id > 0)) {
                    dataToSave.push({
                        id: rowData.id,
                        companyId: parseInt(companyId),
                        lineId: lineId ? parseInt(lineId) : null,
                        plannedQuantity: planned,
                        actualQuantity: actual,
                        isNew: rowData.isNew,
                        isDeleted: rowData.isDeleted
                    });
                }
            });

            if (dataToSave.length === 0) {
                showToast('No valid data to save', 'warning');
                return;
            }

            const viewModel = {
                selectedDepartmentId: currentDepartmentId,
                selectedDate: document.getElementById('productionDate').value,
                periodType: document.getElementById('periodType').value,
                dataRows: dataToSave
            };

            // Show loading state
            const saveButton = document.querySelector('button[onclick="saveAllData()"]');
            const originalText = saveButton.innerHTML;
            saveButton.innerHTML = '<i class="spinner-border spinner-border-sm me-2"></i>Saving...';
            saveButton.disabled = true;

            fetch('/DataEntry/SaveDataEntry', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(viewModel)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast(data.message, 'success');
                    // Reload the page to show updated data
                    setTimeout(() => {
                        location.reload();
                    }, 1500);
                } else {
                    showToast(data.message || 'Error saving data', 'danger');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('Error saving data', 'danger');
            })
            .finally(() => {
                // Restore button state
                saveButton.innerHTML = originalText;
                saveButton.disabled = false;
            });
        }

        function cancelChanges() {
            if (confirm('Are you sure you want to cancel? All unsaved changes will be lost.')) {
                location.reload();
            }
        }
    </script>
}